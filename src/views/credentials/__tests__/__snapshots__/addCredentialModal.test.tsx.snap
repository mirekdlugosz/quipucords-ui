// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddCredentialModal should call onSubmit with the correct filtered data when "Save" is clicked: onSubmit, filtered data 1`] = `
[
  [
    {
      "cred_type": "network",
      "name": "Test Credential",
    },
  ],
]
`;

exports[`AddCredentialModal should have the correct title: AddCredentialModal Title 1`] = `
<span
  class="pf-v5-c-modal-box__title-text"
>
  Add Credential: network
</span>
`;

exports[`AddCredentialModal should render a basic component: basic 1`] = `
<Modal
  actions={[]}
  appendTo={[Function]}
  aria-describedby=""
  aria-label=""
  aria-labelledby=""
  className=""
  hasNoBodyWrapper={false}
  isOpen={true}
  onClose={[Function]}
  ouiaSafe={true}
  position="default"
  showClose={true}
  title="Add Credential: "
  titleIconVariant={null}
  titleLabel=""
  variant="small"
>
  <Form>
    <CredentialFormFields
      authType="Username and Password"
      formData={
        {
          "auth_token": "",
          "authenticationType": "",
          "become_method": "",
          "become_password": "",
          "become_user": "",
          "name": "",
          "password": "",
          "ssh_key": "",
          "ssh_passphrase": "",
          "username": "",
        }
      }
      handleInputChange={[Function]}
      setAuthType={[Function]}
      typeValue=""
    />
    <ActionGroup>
      <Button
        onClick={[Function]}
        variant="primary"
      >
        Save
      </Button>
      <Button
        onClick={[Function]}
        variant="link"
      >
        Cancel
      </Button>
    </ActionGroup>
  </Form>
</Modal>
`;

exports[`CredentialFormFields should call handlers for setAuthType and handleInputChange: handleInputChange 1`] = `
[
  [
    "become_method",
    "sudo",
  ],
]
`;

exports[`CredentialFormFields should call handlers for setAuthType and handleInputChange: setAuthType 1`] = `
[
  [
    "SSH Key",
  ],
]
`;

exports[`CredentialFormFields should render a basic component: basic 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <TextInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render ansible form appropriately: ansible, "Username and Password" 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render satellite form appropriately: satellite, "Username and Password" 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render specific to authType for type network: network, SSH Key 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="SSH Key"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="ssh_key"
      isRequired={true}
      label="SSH Key"
    >
      <TextArea
        data-ouia-component-id="ssh_key"
        id="credential-ssh-key"
        isRequired={true}
        name="ssh_key"
        onChange={[Function]}
        placeholder="Enter private SSH Key"
        rows={10}
      />
      <FormHelperText>
        Please paste your private SSH key here. This key will be used to authenticate your access to the system.
      </FormHelperText>
    </FormGroup>
    <FormGroup
      fieldId="ssh_passphrase"
      label="SSH passphrase"
    >
      <TextInput
        id="ssh_passphrase"
        name="ssh_passphrase"
        onChange={[Function]}
        ouiaId="ssh_passphrase"
        placeholder="Enter SSH passphrase (optional)"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <TextInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render specific to authType for type network: network, Username and Password 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
          {
            "item": "SSH Key",
            "ouiaId": "ssh_key",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
  <React.Fragment>
    <FormGroup
      fieldId="become_method"
      label="Become Method"
    >
      <SimpleDropdown
        dropdownItems={
          [
            {
              "item": "Select option",
              "ouiaId": "default",
            },
            {
              "item": "sudo",
              "ouiaId": "sudo",
            },
            {
              "item": "su",
              "ouiaId": "su",
            },
            {
              "item": "pbrun",
              "ouiaId": "pbrun",
            },
            {
              "item": "pfexec",
              "ouiaId": "pfexec",
            },
            {
              "item": "doas",
              "ouiaId": "doas",
            },
            {
              "item": "dzdo",
              "ouiaId": "dzdo",
            },
            {
              "item": "ksu",
              "ouiaId": "ksu",
            },
            {
              "item": "runas",
              "ouiaId": "runas",
            },
          ]
        }
        isFullWidth={true}
        label="Select option"
        menuToggleOuiaId="become_method"
        onSelect={[Function]}
        variant="default"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_user"
      label="Become User"
    >
      <TextInput
        id="become_user"
        name="become_user"
        onChange={[Function]}
        ouiaId="become_user"
        placeholder="Enter become user (optional)"
        type="text"
      />
    </FormGroup>
    <FormGroup
      fieldId="become_password"
      label="Become Password"
    >
      <TextInput
        id="become_password"
        name="become_password"
        onChange={[Function]}
        ouiaId="become_password"
        placeholder="Enter become password (optional)"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render specific to authType for type openshift: openshift, "Token" 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Token",
            "ouiaId": "auth_token",
          },
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
        ]
      }
      isFullWidth={true}
      label="Token"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_token"
    isRequired={true}
    label="Token"
  >
    <TextInput
      id="credential-token"
      isRequired={true}
      name="auth_token"
      onChange={[Function]}
      ouiaId="auth_token"
      placeholder="Enter Token"
      type="text"
    />
  </FormGroup>
</React.Fragment>
`;

exports[`CredentialFormFields should render specific to authType for type openshift: openshift, "Username and Password" 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <FormGroup
    fieldId="auth_type"
    label="Authentication Type"
  >
    <SimpleDropdown
      dropdownItems={
        [
          {
            "item": "Token",
            "ouiaId": "auth_token",
          },
          {
            "item": "Username and Password",
            "ouiaId": "password",
          },
        ]
      }
      isFullWidth={true}
      label="Username and Password"
      menuToggleOuiaId="auth_type"
      onSelect={[Function]}
      variant="default"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`CredentialFormFields should render vcenter form appropriately: vcenter, "Username and Password" 1`] = `
<React.Fragment>
  <FormGroup
    fieldId="name"
    isRequired={true}
    label="Name"
  >
    <TextInput
      id="credential-name"
      isRequired={true}
      name="name"
      onChange={[Function]}
      ouiaId="cred_name"
      placeholder="Enter a name for the credential"
      type="text"
    />
  </FormGroup>
  <React.Fragment>
    <FormGroup
      fieldId="username"
      isRequired={true}
      label="Username"
    >
      <TextInput
        id="credential-username"
        isRequired={true}
        name="username"
        onChange={[Function]}
        ouiaId="username"
        placeholder="Enter username"
      />
    </FormGroup>
    <FormGroup
      fieldId="password"
      isRequired={true}
      label="Password"
    >
      <TextInput
        id="credential-password"
        isRequired={true}
        name="password"
        onChange={[Function]}
        ouiaId="password"
        placeholder="Enter password"
        type="password"
      />
    </FormGroup>
  </React.Fragment>
</React.Fragment>
`;

exports[`useCredentialForm should derive token auth for specific credential types: token auth 1`] = `
{
  "openshift": "Token",
  "rhacs": "Token",
}
`;

exports[`useCredentialForm should initialize formData correctly: formData 1`] = `
{
  "auth_token": "",
  "authenticationType": "",
  "become_method": "",
  "become_password": "",
  "become_user": "",
  "name": "",
  "password": "",
  "ssh_key": "",
  "ssh_passphrase": "",
  "username": "",
}
`;
